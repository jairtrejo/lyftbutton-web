AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DomainName:
    Type: String
    Description: Apex domain for the site. E.g. example.com.
  SubDomain:
    Type: String
    Description: Canonical subdomain, e.g. www. Leave blank for using apex.
Conditions:
  IsNakedDomain:
    !Equals [!Ref SubDomain, '']
Resources:
  SiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If [IsNakedDomain, !Ref DomainName, !Sub '${SubDomain}.${DomainName}']
  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub '${SiteBucket.Arn}/*'
            Principal:
              CanonicalUser: !GetAtt SiteDistributionAccessIdentity.S3CanonicalUserId
  SiteDistributionAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Access identity for ${DomainName} distribution'
  SiteDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt SiteBucket.DomainName
            Id: !Ref SiteBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${SiteDistributionAccessIdentity}'
        DefaultCacheBehavior:
          TargetOriginId: !Ref SiteBucket
          ForwardedValues:
            QueryString: true
            QueryStringCacheKeys:
              - v
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
        CustomErrorResponses:
          - ErrorCode: 404
            ErrorCachingMinTTL: 3600
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ErrorCachingMinTTL: 3600
            ResponseCode: 200
            ResponsePagePath: /index.html
        Aliases:
          - !If [IsNakedDomain, !Ref DomainName, !Sub '${SubDomain}.${DomainName}']
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
  SSLCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref DomainName
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      ValidationMethod: DNS
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${DomainName}'
      Name: !Ref DomainName
  MainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !If [IsNakedDomain, !Ref DomainName, !Sub '${SubDomain}.${DomainName}']
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt SiteDistribution.DomainName
Outputs:
  NameServers:
    Description: Name servers to set in your domain registrar.
    Value: !Join ['\n', !GetAtt HostedZone.NameServers]
  SSLCertificateArn:
    Description: ARN of the created SSL certificate. It covers example.com and \*.example.com.
    Value: !Ref SSLCertificate
  HostedZoneId:
    Description: Id of the created HostedZone.
    Value: !Ref HostedZone
